
<div class="status">
    @if (CalculateWinner(Squares) is string winner && !string.IsNullOrWhiteSpace(winner))
    {
        <p>Winner: <b>@winner</b></p>
    }
    else
    {
        <p>Next player: <b>@(IsXNext ? 'X' : 'O')</b></p>
    }
</div>

<div class="board-row">
    <Square Value="@Squares[0]" OnSquareClick="@(() => HandleClick(0))" />
    <Square Value="@Squares[1]" OnSquareClick="@(() => HandleClick(1))" />
    <Square Value="@Squares[2]" OnSquareClick="@(() => HandleClick(2))" />
</div>
<div class="board-row">
    <Square Value="@Squares[3]" OnSquareClick="@(() => HandleClick(3))" />
    <Square Value="@Squares[4]" OnSquareClick="@(() => HandleClick(4))" />
    <Square Value="@Squares[5]" OnSquareClick="@(() => HandleClick(5))" />
</div>
<div class="board-row">
    <Square Value="@Squares[6]" OnSquareClick="@(() => HandleClick(6))" />
    <Square Value="@Squares[7]" OnSquareClick="@(() => HandleClick(7))" />
    <Square Value="@Squares[8]" OnSquareClick="@(() => HandleClick(8))" />
</div>

@code {
    [Parameter]
    public bool IsXNext { get; set; }

    [Parameter]
    public string[] Squares { get; set; }

    [Parameter]
    public Action<string[] /* nextSquares */> OnPlay { get; set; }

    string? CalculateWinner(string?[] squares)
    {
        int[][] lines =
        [
            [ 0, 1, 2 ],
            [ 3, 4, 5 ],
            [ 6, 7, 8 ],
            [ 0, 3, 6 ],
            [ 1, 4, 7 ],
            [ 2, 5, 8 ],
            [ 0, 4, 8 ],
            [ 2, 4, 6 ]
        ];

        foreach (var line in lines)
        {
            var a = line[0];
            var b = line[1];
            var c = line[2];

            if (!string.IsNullOrEmpty(squares[a]) &&
                squares[a] == squares[b] &&
                squares[a] == squares[c])
            {
                return squares[a];
            }
        }

        return null;
    }

    void HandleClick(int i)
    {
        if (CalculateWinner(Squares) != null || !string.IsNullOrEmpty(Squares[i]))
            return;

        var nextSquares = Squares.ToArray();
        nextSquares[i] = IsXNext ? "X" : "O";
        OnPlay(nextSquares);
    }
}
