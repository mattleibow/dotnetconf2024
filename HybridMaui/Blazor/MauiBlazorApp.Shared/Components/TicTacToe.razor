@inject IGameStorage GameStorage

<div class="game">

    <div class="game-board">
        <Board IsXNext="@IsXNext" Squares="@CurrentSquares" OnPlay="@HandlePlay" />
        <div class="game-controls">
            <button onclick="@(() => ResetGame())">Reset Board</button>
        </div>
    </div>

    <div class="game-info">
        <div class="moves-title">
            <p>Past Moves:</p>
        </div>

        <ol>
            @foreach (var (move, _) in history.Index())
            {
                <li key="@move">
                    <button onclick="@(() => JumpTo(move))">
                        @(move > 0 ? $"Go to move #{move}" : "Go to game start")
                    </button>
                </li>
            }
        </ol>
    </div>

</div>

@code {
    List<string[]> history = [new string[9]];
    int currentMove = 0;

    bool IsXNext => currentMove % 2 == 0;

    string[] CurrentSquares => history[currentMove];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var oldGameState = await GameStorage.LoadGameState();
            if (oldGameState is not null)
            {
                history = oldGameState.ToList();
                currentMove = history.Count - 1;
            }

            StateHasChanged();
        }
    }

    async void HandlePlay(string[] nextSquares)
    {
        history.Add(nextSquares);
        currentMove = history.Count - 1;

        await GameStorage.StoreGameState(history.ToArray());

        StateHasChanged();
    }

    void JumpTo(int move)
    {
        currentMove = move;

        StateHasChanged();
    }

    async void ResetGame()
    {
        history = [new string[9]];
        currentMove = 0;

        await GameStorage.StoreGameState(history.ToArray());

        StateHasChanged();
    }
}
